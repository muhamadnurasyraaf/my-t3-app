generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    budget        Budget?      @relation("UserBudget")
    saving        Saving?      @relation("UserSaving")
    bankAccount   BankAccount? @relation("UserBankAccount")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Budget {
    id     String @id @default(cuid())
    amount Float
    user   User   @relation("UserBudget", fields: [userId], references: [id])
    userId String @unique // This ensures one-to-one relation
}

model Saving {
    id     String @id @default(cuid())
    amount Float
    user   User   @relation("UserSaving", fields: [userId], references: [id])
    userId String @unique // This ensures one-to-one relation
}

model BankAccount {
    id           String        @id @default(cuid())
    amount       Float
    user         User          @relation("UserBankAccount", fields: [userId], references: [id])
    userId       String        @unique
    transactions Transaction[] @relation("BankTransaction")
}

model Transaction {
    id            String      @id @default(cuid())
    title         String
    description   String      @db.Text
    amount        Float
    bankAccountId String
    bankAccount   BankAccount @relation("BankTransaction", fields: [bankAccountId], references: [id], onDelete: Cascade)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}
